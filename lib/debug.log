HTML Builder - 0.1.1
elements[1] =  "<name>TCP_HOST</name><value>1</value><desc></desc>"
elements[2] =  "<name>TCP_PORT</name><value>2</value><desc></desc>"
elements[3] =  "<name>TCP_SOCKET</name><value>3</value><desc></desc>"
elements[4] =  "<name>SSH_SESSION</name><value>4</value><desc></desc>"
elements[5] =  "<name>SSH_STATE</name><value>5</value><desc></desc>"
elements[6] =  "<name>BUFFER</name><value>6</value><desc></desc>"
elements[7] =  "<name>DISCONNECTED</name><value>0</value><desc></desc>"
elements[8] =  "<name>CONNECTED</name><value>1</value><desc></desc>"
elements[1] =  "<type>sequence</type><name>activeConnections</name><desc>list of active connections<br>active does not mean connected (see activeSockets for that)<br></desc>"
elements[2] =  "<type>integer</type><name>rtn_ident_cnx</name><desc>id of the routine that identifies items in activeConnections<br>to be used for debug with analyze_object<br>example:<br>analyzeObject(activeConnections, "activeConnections", f_debug, rtn_ident_cnx)<br></desc>"
elements[1] =  "<name>ssh_exit</name><digest>Exit the libssh2 functions and free's all memory used internally.</digest><desc></desc><example>ssh_exit()<br></example><see_also>ssh_init()</see_also>"
params =  ""
o =  0
o =  ""
o =  "ssh_exit()<br>"
o =  "ssh_init()"
elements[2] =  "<name>ssh_close</name><digest>close a SSH connection</digest><desc>updates activeConnections<br></desc><param><type>integer</type><name>cnx</name><desc>connection id</desc></param><example>ssh_close(1)<br></example><see_also>ssh_connect()</see_also>"
params = 
.  [1] "<type>integer</type><name>cnx</name><desc>connection id</desc>"
elements[1] =  "<type>integer</type><name>cnx</name><desc>connection id</desc>"
o =  0
o =  "updates activeConnections<br>"
o =  "ssh_close(1)<br>"
o =  "ssh_connect()"
elements[3] =  "<name>ssh_exec</name><digest>run a command on the SSH session</digest><desc></desc><param><type>integer</type><name>cnx</name><desc>connection id</desc></param><param><type>sequence</type><name>cmd</name><desc>command to run</desc></param><param><type>integer</type><name>terminal</name><desc>opens a terminal if 1 (true) (defaults to 0)</desc></param><example>ssh_exec(1, "ls -l", 1)<br></example><see_also></see_also>"
params = 
.  [1] "<type>integer</type><name>cnx</name><desc>connection id</desc>"
.  [2] "<type>sequence</type><name>cmd</name><desc>command to run</desc>"
.  [3] "<type>integer</type><name>terminal</name><desc>opens a terminal if 1 (true) (defaults to 0)</desc>"
elements[1] =  "<type>integer</type><name>cnx</name><desc>connection id</desc>"
elements[2] =  "<type>sequence</type><name>cmd</name><desc>command to run</desc>"
elements[3] =  "<type>integer</type><name>terminal</name><desc>opens a terminal if 1 (true) (defaults to 0)</desc>"
o =  0
o =  ""
o =  "ssh_exec(1, "ls -l", 1)<br>"
o =  ""
elements[1] =  "<name>check_link</name><digest>check if a connection is valid</digest><desc></desc><param><type>integer</type><name>cnx</name><desc></desc></param><return></return><example>if not check_link(1) then puts(2, "Connection 1 failed!") end if<br></example><see_also></see_also>"
params = 
.  [1] "<type>integer</type><name>cnx</name><desc></desc>"
elements[1] =  "<type>integer</type><name>cnx</name><desc></desc>"
o =  ""
o =  ""
o =  "if not check_link(1) then puts(2, "Connection 1 failed!") end if<br>"
o =  ""
elements[2] =  "<name>get_buffer</name><digest>reads connection buffer</digest><desc></desc><param><type>integer</type><name>cnx</name><desc>connection id</desc></param><return>sequence: buffer content<br></return><example>data = get_buffer(cnx)<br></example><see_also></see_also>"
params = 
.  [1] "<type>integer</type><name>cnx</name><desc>connection id</desc>"
elements[1] =  "<type>integer</type><name>cnx</name><desc>connection id</desc>"
o =  "sequence: buffer content<br>"
o =  ""
o =  "data = get_buffer(cnx)<br>"
o =  ""
elements[3] =  "<name>set_buffer</name><digest>sets connection buffer</digest><desc></desc><param><type>integer</type><name>cnx</name><desc>connection id</desc></param><param><type>sequence</type><name>data</name><desc>new buffer content</desc></param><return>integer: 1 on success, 0 on failure<br></return><example>data = get_buffer(cnx)<br>ok = set_buffer(cnx, remove(data, 1, 7))<br></example><see_also></see_also>"
params = 
.  [1] "<type>integer</type><name>cnx</name><desc>connection id</desc>"
.  [2] "<type>sequence</type><name>data</name><desc>new buffer content</desc>"
elements[1] =  "<type>integer</type><name>cnx</name><desc>connection id</desc>"
elements[2] =  "<type>sequence</type><name>data</name><desc>new buffer content</desc>"
o =  "integer: 1 on success, 0 on failure<br>"
o =  ""
o =  "data = get_buffer(cnx)<br>ok = set_buffer(cnx, remove(data, 1, 7))<br>"
o =  ""
elements[4] =  "<name>clean_buffer</name><digest>cleans connection buffer</digest><desc></desc><param><type>integer</type><name>cnx</name><desc>connection id</desc></param><return>integer: 1 on success, 0 on failure<br></return><example>ok = clean_buffer(cnx)<br></example><see_also></see_also>"
params = 
.  [1] "<type>integer</type><name>cnx</name><desc>connection id</desc>"
elements[1] =  "<type>integer</type><name>cnx</name><desc>connection id</desc>"
o =  "integer: 1 on success, 0 on failure<br>"
o =  ""
o =  "ok = clean_buffer(cnx)<br>"
o =  ""
elements[5] =  "<name>find_connection</name><digest>find a connection id from host and port used</digest><desc></desc><param><type>sequence</type><name>host</name><desc></desc></param><param><type>integer</type><name>port</name><desc></desc></param><return></return><example>i = find_connection("192.168.1.250", 23)<br></example><see_also></see_also>"
params = 
.  [1] "<type>sequence</type><name>host</name><desc></desc>"
.  [2] "<type>integer</type><name>port</name><desc></desc>"
elements[1] =  "<type>sequence</type><name>host</name><desc></desc>"
elements[2] =  "<type>integer</type><name>port</name><desc></desc>"
o =  ""
o =  ""
o =  "i = find_connection("192.168.1.250", 23)<br>"
o =  ""
elements[6] =  "<name>ssh_init</name><digest>Initialize the libssh2 functions</digest><desc></desc><return>Returns 1 if successful else returns 0<br></return><example>if not ssh_init() then abort(1) end if<br></example><see_also>ssh_exit()</see_also>"
params =  ""
o =  "Returns 1 if successful else returns 0<br>"
o =  ""
o =  "if not ssh_init() then abort(1) end if<br>"
o =  "ssh_exit()"
elements[7] =  "<name>ssh_connect</name><digest>open a SSH connection to a remote host</digest><desc>updates activeConnections<br></desc><param><type>sequence</type><name>host</name><desc></desc></param><param><type>integer</type><name>port</name><desc></desc></param><param><type>sequence</type><name>username</name><desc></desc></param><param><type>sequence</type><name>password</name><desc></desc></param><return>integer: connection id<br></return><example>cnx = ssh_connect("192.168.1.250", 22, "admin", "admin")<br></example><see_also>ssh_close()</see_also>"
params = 
.  [1] "<type>sequence</type><name>host</name><desc></desc>"
.  [2] "<type>integer</type><name>port</name><desc></desc>"
.  [3] "<type>sequence</type><name>username</name><desc></desc>"
.  [4] "<type>sequence</type><name>password</name><desc></desc>"
elements[1] =  "<type>sequence</type><name>host</name><desc></desc>"
elements[2] =  "<type>integer</type><name>port</name><desc></desc>"
elements[3] =  "<type>sequence</type><name>username</name><desc></desc>"
elements[4] =  "<type>sequence</type><name>password</name><desc></desc>"
o =  "integer: connection id<br>"
o =  "updates activeConnections<br>"
o =  "cnx = ssh_connect("192.168.1.250", 22, "admin", "admin")<br>"
o =  "ssh_close()"
