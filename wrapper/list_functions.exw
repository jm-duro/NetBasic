include lib/_debug_.e
include lib/_types_.e
include lib/_search_.e
include lib/_sequence_.e as seq
include lib/_file_.e
include get.e

constant
  App = "List Functions",
  Ver = "0.1.0"

-----------------------------------------------------------------------------

-- compares seq2 to seq1
-- returns differences
function compare_sequences(sequence seq1, sequence seq2)
  sequence result
  integer l2in1, l1in2
  sequence s1, s2

  result = {}

  for i = 1 to length(seq1) do seq1[i] = {i, seq1[i]} end for
  for i = 1 to length(seq2) do seq2[i] = {i, seq2[i]} end for

  while length(seq1) and length(seq2) do
    l2in1 = find_in_array(seq2[1], seq1, {{"search_field",2}})
    l1in2 = find_in_array(seq1[1], seq2, {{"search_field",2}})

    if l2in1 then
      s1 = seq1[l2in1][2]
    else
      s1 = ""
    end if
    if l1in2 then
      s2 = seq2[l1in2][2]
    else
      s2 = ""
    end if

    if equal(seq1[1][2], seq2[1][2]) then
      result = append(result, {'=', seq1[1][1], seq2[1][1]})
    elsif (l1in2 * l2in1) > 0 then
      result = append(result, {'=', seq1[l2in1][1], seq2[1][1]})
      result = append(result, {'=', seq1[1][1], seq2[l1in2][1]})
      seq2 = remove(seq2, l1in2, l1in2)
      seq1 = remove(seq1, l2in1, l2in1)
    elsif l1in2 > 0 then
      for i = 1 to l1in2-1 do
        result = append(result, {'+', 0, seq2[i][1]})
      end for
      seq2 = remove(seq2, 1, l1in2-1)
      result = append(result, {'=', seq1[1][1], seq2[1][1]})
    elsif l2in1 > 0 then
      for i = 1 to l2in1-1 do
        result = append(result, {'-', seq1[i][1], 0})
      end for
      seq1 = remove(seq1, 1, l2in1-1)
      result = append(result, {'=', seq1[1][1], seq2[1][1]})
    else
      result = append(result, {'#', seq1[1][1], seq2[1][1]})
    end if
    seq1 = remove(seq1, 1, 1)
    seq2 = remove(seq2, 1, 1)
  end while
  for i = 1 to length(seq1) do
    result = append(result, {'-', seq1[i][1], 0})
  end for
  for i = 1 to length(seq2) do
    result = append(result, {'+', 0, seq2[i][1]})
  end for
  return result
end function

------------------------------------------------------------------------------

function get_result_item(sequence id, sequence res, object default)
  for i = 1 to length(res) do
    if equal(res[i][1], id) then return res[i][2] end if
  end for
  return default
end function

------------------------------------------------------------------------------

-- analyzes current line according to template
-- returns variable elements
function analyzeSyntax(sequence code, sequence tmpl)
  sequence analysis, result, msg, template, filter, var
  integer c, t, optional

  -- manage optional parameters

  template = {}
  filter = {}
  optional = 0
  for i = 1 to length(tmpl) do
    if atom(tmpl[i]) then
      if tmpl[i] = ']' then
        optional = 0
      elsif tmpl[i] = '[' then
        optional = 1
      else
        error_message(sprintf("analyzeSyntax: Unknown character %s", tmpl[i]), 1)
      end if
    else
      template = append(template, tmpl[i])
      filter = append(filter, optional)
    end if
  end for
--  analyze_object(template, "analyzeSyntax: template", {{"output", f_debug}})
--  analyze_object(filter, "filter", {{"output", f_debug}})
--  analyze_object(code, "analyzeSyntax: code", {{"output", f_debug}})
  result = {}
  analysis = compare_sequences(template, code)
--  analyze_object(analysis, "analysis", {{"output", f_debug}})
  result = {}
  c = 1  -- code index
  t = 1  -- template index
  for i = 1 to length(analysis) do
    if analysis[i][2] then t = analysis[i][2] end if
    if analysis[i][3] then c = analysis[i][3] end if
    if analysis[i][1] = '#' then
      result = append(result, {template[t], code[c]})
    elsif analysis[i][1] = '+' then
      result = append(result, {"", code[c]})
    elsif analysis[i][1] = '-' then
      t = analysis[i][2]
      if not filter[i] then
        log_printf("analyzeSyntax: element '%s' not present\n",
                      {template[t]})
      end if
    end if
  end for
--  analyze_object(result, "result", {{"output", f_debug}})
  -- check result
  for i =1 to length(template) do
    -- if variable found
    if sequence(template[i][1]) and (template[i][1][1] = '<') then
      -- if variable is not optional
      if not filter[i] then
        -- check if variable returned
        var = get_result_item(template[i][1], result, "bad")
        if equal(var, "bad") then
          msg = sprintf("analyzeSyntax: no %s variable in %s statement",
                        {template[i][1], template[1]})
          error_message(msg, 1)
        end if
        -- check if variable is an identifier
        if equal(template[i][1], "<identifier>") and not is_identifier(var) then
          msg = sprintf("analyzeSyntax: identifier expected, got '%s'",
                        {var})
          error_message(msg, 1)
        end if
      end if
    end if
  end for
  return result
end function

--------------------------------------------------------------------------------

function split_line(sequence str, sequence separators)
  integer slen
  sequence result, s, item

  result = {}
  slen = length(str)
  if slen = 0 then return result end if

  s = {}
  for i = 1 to slen do
    if find(str[i], separators) then
      item = seq:trim(s)
      if length(item) then
        result = append(result, item)
      end if
      -- skip spaces and tabs
      if (str[i] != ' ') and (str[i] != '\t') then
        result = append(result, {str[i]})
      end if
      s = {}
    else
      s = s & str[i]
    end if
  end for
  item = seq:trim(s)
  if length(item) then
    result = append(result, item)
  end if
  return result
end function

------------------------------------------------------------------------------

function analyzeParameters(sequence line)
  sequence result, splitted, analysis, s
  object param_type, param_name, param_value

  puts(f_debug, "analyzeParameters\n")
  result = ""
  if length(line) = 0 then return {} end if
  splitted = split(line, ",", {})
  analyze_object(splitted, "splitted", {{"output", f_debug}})
  for p = 1 to length(splitted) do
    s = split_line(splitted[p], " =")
    analysis = analyzeSyntax(s, {"<type>", "<identifier>", '[', "=", "<value>", ']'})
    analyze_object(analysis, "analysis", {{"output", f_debug}})
    param_type = get_result_item("<type>", analysis, 0)
    param_name = get_result_item("<identifier>", analysis, 0)
    param_value = get_result_item("<value>", analysis, 0)
    if equal(param_type, "integer") then
      result &= ", INTEGER"
    elsif equal(param_type, "atom") then
      result &= ", ATOM"
    elsif equal(param_type, "sequence") then
      result &= ", SEQUENCE"
    elsif equal(param_type, "object") then
      result &= ", OBJECT"
    else
      result &= ", \"" & param_type & "\""
    end if
  end for
  if length(result) then result = remove(result, 1, 2) end if
  return result
end function

------------------------------------------------------------------------------

function parse(sequence line)
  sequence splitted

  printf(f_debug, "parse(%s)\n", {line})
  splitted = split_line(line, " ()")
  analyze_object(splitted, "splitted", {{"output", f_debug}})
  if equal(splitted[2], "procedure") then
    return "{PROC, \"" & splitted[3] & "\", {" &
           analyzeParameters(join(splitted[5..$-1], " ")) & "} },"

  elsif equal(splitted[2], "function") then
    return "{FUNC, \"" & splitted[3] & "\", {" &
           analyzeParameters(join(splitted[5..$-1], " ")) & "} },"

  else
    return ""
  end if
end function

--------------------------------------------------------------------------------

  sequence cmd, s, lines, path, section, msg, splitted, program_name, program, doc
  integer n, withinComment, withinGlobal, insertHere
  object o

  cmd = command_line()
  if length(cmd) < 3 then
    error_message("Syntax: code_parser file\n", 1)
  end if

  with_debug = 1

  program_name = cmd[3]

  path = file_path(program_name)
  f_debug = open(path & SLASH & "debug.log", "w")
  puts(f_debug, App & " - " & Ver & "\n")

  section = ""
  lines = read_lines(program_name)
  program = {}
  withinComment = 0
  withinGlobal = 0
  for i = 1 to length( lines ) do
    s = seq:trim(lines[i])
    msg = ""
    if not withinComment then
      n = match("/*", s)
      if n > 0 then
        msg = seq:trim(s[1..n-1])
        withinComment = 1
      else
        n = match("--", s)
        if n > 0 then
          msg = seq:trim(s[1..n-1])
        else
          msg = s
        end if
      end if
    else
      n = match("*/", s)
      if n > 0 then
        msg = seq:trim(s[n+2..$])
        withinComment = 0
      end if
    end if
  analyze_object(msg, "msg", {{"output", f_debug}})
    if length(msg) then
      if not withinGlobal then
        o = match_any({"global", "export", "public"}, msg, {})
        if sequence(o) and (o[1] = 1) then
          insertHere = i
          if length(msg) = 6 then  -- "global", "export" or "public" alone
            withinGlobal = 1
          else
            splitted = split(msg, " ", {})
            if length(splitted) = 2 then  -- identifiers coming next line
              withinGlobal = 1
            elsif find(splitted[2], {"function", "procedure"}) then
              n = rfind(')', s, {})
              if n = 0 then  -- more parameters coming next line
                withinGlobal = 1
              else
                msg = msg[1..n]
              end if
            else
              n = rfind(',', s, {})  -- more identifiers coming next line
              if n = length(s) then
                withinGlobal = 1
              end if
            end if
          end if
        else
          msg = ""
        end if
      else
        n = rfind(',', msg, {})
        if n != length(msg) then
          withinGlobal = 0
        end if
      end if
      if length(msg) then
        if withinGlobal then
          section &= msg & " "
        else
          section &= msg
          doc = parse(section)
          if length(doc) then
            program = append(program, doc)
          end if
          section = ""
        end if
      end if
    end if
  end for
  analyze_object(program, "program", {{"output", f_debug}})
  write_lines(path & SLASH & file_base(program_name) & ".log", program)
  close(f_debug)
  -- void = wait_key()

