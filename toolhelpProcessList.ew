------------------------------------------------------------
-- wrapper for CreateToolhelpSnapshot. 
-- Will list running processes along with any associated 
-- files/dlls
--
-- Pete Stoner 16/06/2006
-- Enjoy!
------------------------------------------------------------

include std/dll.e
include std/machine.e
include std/wildcard.e
without warning

without trace

constant 
 KERNEL32 = open_dll("Kernel32.dll"),

 dllSnapshot = define_c_func( KERNEL32, "CreateToolhelp32Snapshot", {C_LONG, C_LONG}, C_INT),		
 dllCloseHandle = define_c_func( KERNEL32, "CloseHandle", {C_INT}, C_INT),
 dllProcess32First = define_c_func( KERNEL32, "Process32First", {C_LONG, C_POINTER}, C_INT),
 dllProcess32Next = define_c_func( KERNEL32, "Process32Next", {C_LONG, C_POINTER}, C_INT),
 dllOpenProcess = define_c_func( KERNEL32, "OpenProcess", {C_LONG, C_INT, C_LONG}, C_LONG),
 dllGetPriorityClass = define_c_func( KERNEL32, "GetPriorityClass", {C_LONG}, C_LONG),
 dllListProcessModules = define_c_func( KERNEL32, "ListProcessModules", {C_LONG}, C_INT),
 dllModule32First = define_c_func( KERNEL32, "Module32First", {C_LONG, C_POINTER}, C_INT),
 dllModule32Next = define_c_func( KERNEL32, "Module32Next", {C_LONG, C_POINTER}, C_INT),
 dllGetLastError = define_c_func( KERNEL32, "GetLastError",{},C_UINT),
 dllFormatMessage = define_c_func(KERNEL32, "FormatMessageA",
            {C_UINT, C_POINTER, C_UINT, C_UINT, C_POINTER, C_UINT, C_POINTER}, C_UINT)

global constant
  P_HANDLE		= 1,	-- process handle
  P_NAME		= 2,	-- process name
  P_ID			= 3,	-- process ID
  P_THREADS		= 4,	-- number of threads
  P_PARENT_ID 	= 5,	-- process parent ID
  P_PRIORITY 	= 6		-- priority
  
constant    
	FORMAT_MESSAGE_ALLOCATE_BUFFER = #00000100,
    FORMAT_MESSAGE_IGNORE_INSERTS  = #00000200,
    FORMAT_MESSAGE_FROM_STRING     = #00000400,
    FORMAT_MESSAGE_FROM_HMODULE    = #00000800,
    FORMAT_MESSAGE_FROM_SYSTEM     = #00001000,
    FORMAT_MESSAGE_ARGUMENT_ARRAY  = #00002000,
    FORMAT_MESSAGE_MAX_WIDTH_MASK  = #000000FF


function or_all(sequence s)
-- or together all elements of s
    atom result
    result = 0
    for i = 1 to length(s) do
		result = or_bits(result, s[i])
    end for
    return result
end function  

function getString(atom pName)
	sequence name
	integer i,wc
	name = ""
	wc = peek(pName) 
	i = 0
	while wc do
   		name &= wc
   		i += 1
   		wc = peek(pName+i) 
 	end while
	return name
end function

-- Get the last error code and message
function getErrorInfo()
    atom msg_buffer, ret_code, msg_len
    sequence msg

    msg_buffer = allocate(1024)
    ret_code = c_func(dllGetLastError, {})
    msg_len = c_func(dllFormatMessage,
                {or_all({FORMAT_MESSAGE_FROM_SYSTEM,
                        FORMAT_MESSAGE_IGNORE_INSERTS}),
                NULL,
                ret_code,
                0,
                msg_buffer,
                1024,
                NULL})
    if msg_len then
        msg = peek({msg_buffer, msg_len})
    else
        msg = ""
    end if
    free(msg_buffer)

    return msg--{rtn_code, msg}

end function

-- flags/constantss
constant 
 MAX_MODULE_NAME32		= 255,
 TH32CS_SNAPHEAPLIST	= #1,
 TH32CS_SNAPPROCESS		= #2,
 TH32CS_SNAPTHREAD		= #4,
 TH32CS_SNAPMODULE		= #8,
 TH32CS_INHERIT			= #80000000,
 TH32CS_SNAPALL			= or_all({TH32CS_SNAPHEAPLIST, TH32CS_SNAPPROCESS, TH32CS_SNAPTHREAD, TH32CS_SNAPMODULE}),
 INVALID_HANDLE_VALUE 	= -1,--#0FFFFFFFF, 
 MAX_PATH   			= 260,
 ERROR_NO_MORE_FILES 	= 18,
--  process flags
 PROCESS_TERMINATE         = #0001,
 PROCESS_CREATE_THREAD     = #0002,
 PROCESS_VM_OPERATION      = #0008,
 PROCESS_VM_READ           = #0010,
 PROCESS_VM_WRITE          = #0020,
 PROCESS_DUP_HANDLE        = #0040,
 PROCESS_CREATE_PROCESS    = #0080,
 PROCESS_SET_QUOTA         = #0100,
 PROCESS_SET_INFORMATION   = #0200,
 PROCESS_QUERY_INFORMATION = #0400,
 STANDARD_RIGHTS_REQUIRED  = #000F0000,
 SYNCHRONIZE               = #00100000,
 PROCESS_ALL_ACCESS        = STANDARD_RIGHTS_REQUIRED+SYNCHRONIZE+#0FFF, 
-- priority flags
 BELOW_NORMAL_PRIORITY_CLASS = #00004000,
 ABOVE_NORMAL_PRIORITY_CLASS = #00008000,
 HIGH_PRIORITY_CLASS		 = #00000080,
 IDLE_PRIORITY_CLASS		 = #00000040,
 NORMAL_PRIORITY_CLASS		 = #00000020,
 REALTIME_PRIORITY_CLASS	 = #00000100
 
-- typedef struct tagPROCESSENTRY32 
constant 
 PE32_dwSize				= 0,	-- DWORD  set this member to sizeof(PROCESSENTRY32)
 PE32_cntUsage				= 4,	-- DWORD  This member is no longer used and is always set to zero. 
 PE32_th32ProcessID 		= 8, 	-- DWORD  Process identifier.
 PE32_th32DefaultHeapID 	= 12,	-- ULONG_PTR  This member is no longer used and is always set to zero. 
 PE32_th32ModuleID			= 16,	-- DWORD This member is no longer used and is always set to zero. 
 PE32_cntThreads			= 20,	-- DWORD Number of execution threads started by the process. 
 PE32_th32ParentProcessID	= 24,	-- DWORD Process identifier of the process that created this process (its parent process). 
 PE32_pcPriClassBase		= 28,	-- LONG Base priority of any threads created by this process.  
 PE32_dwFlags				= 32,	-- DWORD This member is no longer used, and is always set to zero.  		=  
 PE32_szExeFile				= 36, 	-- MAX_PATH, Pntr to a null-termed string for the executable file for the process.
 SIZEOF_PE32STRUCT			= 40 + MAX_PATH
-- end typedef struct _tagPROCESSENTRY32  

-- typedef struct tagMODULEENTRY32 
constant
 MOD32_dwSize		= 0,	-- DWORD set this member to sizeof(MODULEENTRY32).
 MOD32_th32ModuleID	= 4,	-- DWORD This member is no longer used, and is always set to one. 
 MOD32_th32ProcessID= 8,	-- DWORD owning process
 MOD32_GlblcntUsage	= 12,	-- DWORD Global usage count on the module (usually equal to 0xFFFF
 MOD32_ProccntUsage	= 16,	-- DWORD Module usage count in th32ProcessID's context (usually equal to 0xFFFF
 MOD32_modBaseAddr	= 20,	-- BYTE  Base address of module in th32ProcessID's context
 MOD32_modBaseSize	= 21,	-- DWORD Size of the module, in bytes
 MOD32_hModule		= 25,	-- DWORD Handle to the module in the context of the owning process
 MOD32_szModule		= 29,	-- [MAX_MODULE_NAME32 + 1] Pntr to a null-termed string for the executable file for the module name
 MOD32_szExePath	= (32 + MAX_MODULE_NAME32 + 1), -- [MAX_PATH] Pntr to a null-terminated string that specifies the module path.
 SIZEOF_MOD32STRUCT	= (32 + MAX_MODULE_NAME32 + 1 + MAX_PATH )	
-- end typedef struct tagMODULEENTRY32 

 
global function ListProcessModules( atom pID)
	atom hModsnapshot
	atom processHandle, dwPriorityClass
	sequence mList
	sequence pModules, mThreads
	object pExePath, pModID
	object void

-- // Set the size of the structure before using it.
	 atom MODULE32
	 MODULE32 = allocate(SIZEOF_MOD32STRUCT)
	 poke4(MODULE32, SIZEOF_MOD32STRUCT)

	 mList = {}
--   // Take a snapshot of all modules in the specified process.
	hModsnapshot = c_func(dllSnapshot, {TH32CS_SNAPMODULE, pID})
	if hModsnapshot != INVALID_HANDLE_VALUE then

  	  if c_func(dllModule32First, {hModsnapshot, MODULE32}) then
  --   // Now walk the module list & get information about each module
  
        while 1 do
	  		pExePath = getString(MODULE32 + MOD32_szExePath)
	  		mList &= {pExePath}
	  	
	  		if not c_func(dllModule32Next, {hModsnapshot, MODULE32}) then
	  			exit  -- no more to get
	  		end if
  	
  	    end while
  	  end if
	  void = c_func(dllCloseHandle, {hModsnapshot})	-- close the snapshoy handle
    end if
	
	free(MODULE32)
 	return mList
end function

--==========================================================
global function GetProcessList( )
-- returns sequence containing a list of running processes
-- {processhandle, filename, process id, No of threads, 
-- parent process id, Priority class} 
------------------------------------------------------------
	atom snapshotHandle, processHandle
	object dwPriorityClass
	sequence pList, mList
	sequence pModules, pThreads
	object void, ret

-- // Set the size of the structure before using it.
	atom PROCESSENTRY32
	PROCESSENTRY32 = allocate(SIZEOF_PE32STRUCT)
	poke4(PROCESSENTRY32, SIZEOF_PE32STRUCT)

	pList = {}
	mList = {}

--   // Take a snapshot of all processes in the system.
	snapshotHandle = c_func(dllSnapshot, {TH32CS_SNAPALL, 0})--PROCESS, 0})
	if snapshotHandle = INVALID_HANDLE_VALUE then
		free(PROCESSENTRY32)
		return 0
	end if
  
--   // Retrieve information about the first process 
	ret = c_func(dllProcess32First, {snapshotHandle, PROCESSENTRY32})	
	if ret != 0 then

--   // Now walk the snapshot of processes, and
--   // get information about each process in turn
	while 1 do
--     // Retrieve the priority class.
        processHandle = c_func(dllOpenProcess, {PROCESS_QUERY_INFORMATION, 
        				0, peek4u(PROCESSENTRY32+ PE32_th32ProcessID)})
        if not processHandle then
--          printf(1, "%s", {getErrorInfo()})
          dwPriorityClass = 0
        else
	      dwPriorityClass = c_func(dllGetPriorityClass, {processHandle})
          void = c_func(dllCloseHandle, {processHandle})
	    end if
	    
       	if equal(#20, dwPriorityClass)then
      		dwPriorityClass = "Normal"
      	elsif equal(#80, dwPriorityClass) then
      		dwPriorityClass = "High"
      	elsif equal(#00, dwPriorityClass) then
      		dwPriorityClass = "Unknown"
      	else
      		dwPriorityClass = {dwPriorityClass}
		end if
	    
		processHandle = peek4u(PROCESSENTRY32+ PE32_th32ProcessID)
	    
		pList &= {
			{processHandle,
			getString(PROCESSENTRY32+PE32_szExeFile), 
			peek4u(PROCESSENTRY32+ PE32_th32ProcessID),
			peek4u(PROCESSENTRY32+ PE32_cntThreads),
			peek4u(PROCESSENTRY32+ PE32_th32ParentProcessID),
			dwPriorityClass} 
    			}
 		
 		if not c_func(dllProcess32Next, {snapshotHandle, PROCESSENTRY32}) then
 			exit
 		end if
 		
 	  end while
 	end if
 	
	free(PROCESSENTRY32)
	void = c_func(dllCloseHandle, {snapshotHandle})
 	return pList
 
end function 	

		--==========================================================

